<?php
module_load_include('inc','simcore','simcore.helper');
module_load_include('inc','simcore','simcore.functionhelper');

function simcore_menu(){
    $items['admin/sim-importer'] = array(
        'title' => 'Sim importer',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sim_import_admin'),
        'access arguments' => array('administer settings'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/cong-no'] = array(
        'title' => 'Cong no',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cong_no_admin'),
        'access arguments' => array('administer settings'),
        'type' => MENU_NORMAL_ITEM,
    );
}

function search_handle(){

    $query = array();
    $so = $_GET['so'];
    $mang = $_GET['mang'];
    $gia = $_GET['gia'];

    if(!empty($so)){
        $so_strim = trim($so,'.');
        if (strpos($so_strim,'*') !== false) {
            echo 'true';
        }
        else{

        }
    }
    if(!empty($mang)){
        $query['mang'] = $mang;
    }
    if(!empty($gia)){
        $query['gia[min]'] = array("min" => $gia['min']);
        $query['gia[max]'] = array("min" => $gia['max']);
    }

   return $query;
}



function simcore_menu_alter(&$items) {
    $items['admin/sim-importer']['access callback'] = 'simcore_user_access';
    $items['admin/cong-no']['access callback'] = 'simcore_user_access';
}

function simcore_block_info() {
    $blocks = array();

    $blocks['search_sim'] = array(
        'info' => t('Search sim block'),
    );
    return $blocks;
}

function simcore_block_view($delta='') {
    $block = array();
    switch($delta) {
        case 'search_sim' :
            $block['subject'] = t("Công cụ tìm kiếm");
            $block['content'] = simcore_search_block_content();
        break;
    }

    return $block;
}

function simcore_search_block_content() {
    $result_html = theme('block_search_sim');
    return $result_html;
}


function simcore_theme(){
    return array(
        'block_search_sim' =>  array(
        'template' => 'template/search',
        'render element' => 'element'
    ),
        'import__page' => array(
            'render element' => 'page',
            'template' => 'template/page--import',
        )

    );
}

function simcore_node_presave($node){
    $dai_ly = variable_get('dai_ly');
    if($node->type == 'sim' && $node->is_new == TRUE){
        if(empty($node->field_lo_i_sim[$node->language][0]['tid'])){
           $result =  _get_kind_of_phone_number($node->title);

            if(!empty($dai_ly)){
                $node->field_dai_ly[$node->language][0]['tid'] = $dai_ly;
            }
            if(!empty($result)){
                $node->field_lo_i_sim[$node->language][0]['tid'] = $result;
            }
        }
        $gia = variable_get('gia');
        $so = variable_get('so');
        if(!empty($gia) && isset($gia)){
            $node->field_gia[$node->language][0]['value'] = convertTextToNumber($gia);
        }
        if(!empty($so) && isset($so)){
            $node->field_so_formatted[$node->language][0]['value'] = formatText($so);
        }
        variable_del('gia');
        variable_del('so');
    }
}

function  sim_import_admin($form, &$form_state){
    $vocabulary = taxonomy_vocabulary_machine_name_load('dai_ly');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $options = array();
      foreach($terms as $term){
          $options[$term->tid] = $term->name;
      }
    $form = array();
    $form['file'] = array(
        '#type' => 'file',
        '#title' => t('File để import sim'),
        '#description' => t('Upload file với định dạng là csv'),
        '#upload_validators' => array('file_validate_extensions' => array('csv')),
    );

    $form['dai_ly'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('Đại lý'),
        '#description' => t('Nhập đại lý'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    return $form;
}

function sim_import_admin_validate($form, &$form_state) {
    $file = file_save_upload('file', array(
        'file_validate_extensions' => array('csv'),
    ));
    if ($file) {
        if ($file = file_move($file, 'public://')) {
            $form_state['values']['file'] = $file;
        }
        else {
            form_set_error('file', t('Không thể upload file vào folder.'));
        }
    }
    else {
        form_set_error('file', t('Không có file, vui lòng thử lại.'));
    }
}

function sim_import_admin_submit($form, &$form_state) {
    $file=$form_state['values']['file'];
    unset($form_state['values']['file']);
    $dai_ly = $form_state['values']['dai_ly'];
    variable_set('dai_ly',$dai_ly);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    import_file_progress($file->fid);
    drupal_set_message(t('Bạn đã import thành công @filename.', array('@filename' => $file->filename)));
}


function import_file_progress($fid){
// Given that we have a new file that is now managed by Drupal.
    $file = file_load($fid);
    $importer_id = 'sim_importer';
// Load the source fetcher config.
    $source = feeds_source($importer_id);
    $fetcher_config = $source->getConfigFor($source->importer->fetcher);
// Add the new file object, and it's uri to the fetcher config.
    $fetcher_config['source'] = $file->uri;
    $fetcher_config['file'] = $file;
// Set the source fetcher config.
    $source->setConfigFor($source->importer->fetcher, $fetcher_config);
// Save the source.
    $source->save();
    $source->startImport();
}

function simcore_feeds_presave(FeedsSource $source, $entity, $item){
    if($entity->feeds_item->entity_type == 'node'){
        $item['gia'] = convertTextToNumber($item['gia']);
        $item['so'] = formatText($item['so']);
        variable_set('gia', $item['gia']);
        variable_set('so', $item['so']);
    }
}


function cong_no_admin(){
    $vocabulary = taxonomy_vocabulary_machine_name_load('dai_ly');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $options = array();
    $month = array();
    $year = array();
    foreach($terms as $term){
        $options[$term->tid] = $term->name;
    }

    for($i = 1; $i < 12; $i ++){
        $month[$i] = 'Tháng '.$i;
    }

    for($y = 2014; $y < 2018; $y ++){
        $year[$y] = 'Năm '.$y;
    }
    $form = array();
    $form['dai_ly'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('Đại lý'),
        '#description' => t('Nhập đại lý'),
    );

    $form['month'] = array(
        '#type' => 'select',
        '#options' => $month,
        '#title' => t('Tháng'),
        '#description' => t('Chọn tháng'),
    );

    $form['year'] = array(
        '#type' => 'select',
        '#options' => $year,
        '#title' => t('Năm'),
        '#description' => t('Chọn năm'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    return $form;
}

function cong_no_admin_submit($form, &$form_state){
    form_state_values_clean($form_state);
    $term  = taxonomy_term_load($form_state['values']['dai_ly']);
    $field_chiet_khau = field_get_items('taxonomy_term', $term,'field_chiet_khau');
    $field_chiet_khau = _field_collection_load_items($field_chiet_khau);
    $sims = taxonomy_select_nodes($form_state['values']['dai_ly'], false);
    $simsDetail = node_load_multiple($sims);
    $listSimsByMonth = array();

    foreach($simsDetail as $simDetail){
        if(!empty($simDetail->field_ngay_ban_sim['und'][0]['value'])){
            if(date('m Y', strtotime($simDetail->field_ngay_ban_sim['und'][0]['value'])) == $form_state['values']['month'].' '.$form_state['values']['year']){
                $listSimsByMonth[] = $simDetail;
            }
        }
    }
    $congNo = congNoTypeCalculation($listSimsByMonth, $field_chiet_khau);
    drupal_set_message(t("Tổng công nợ trong tháng @thang năm @nam của @daily là @congno đồng",
        array('@thang' =>$form_state['values']['month'],'@daily' => $term->name, '@nam' => $form_state['values']['year'], '@congno' => $congNo)));
}

function simcore_user_access($account) {
    global $user;
    if($user->uid == 1){
        return TRUE;
    }
    if($user->name == 'admin' || $user->uid == 19){
        return TRUE;
    }
    return FALSE;
}
